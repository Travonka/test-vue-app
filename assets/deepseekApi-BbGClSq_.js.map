{"version":3,"file":"deepseekApi-BbGClSq_.js","sources":["../../src/config/deepseek.ts","../../src/services/deepseekApi.ts"],"sourcesContent":["// DeepSeek API Configuration\nexport const DEEPSEEK_CONFIG = {\n  // API endpoint for DeepSeek chat completions\n  API_URL: 'https://api.deepseek.com/v1/chat/completions',\n  \n  // Model to use for resume analysis\n  MODEL: 'deepseek-chat',\n  \n  // API version\n  API_VERSION: '2024-01-01',\n  \n  // Request timeout in milliseconds\n  TIMEOUT: 30000,\n  \n  // Maximum retries for failed requests\n  MAX_RETRIES: 3,\n  \n  // Retry delay in milliseconds\n  RETRY_DELAY: 1000,\n};\n\n// Hardcoded API key\nexport const getDeepSeekApiKey = (): string => {\n  const apiKey = 'sk-283284a890f8466099f2bb90d5329fbc';\n  console.log('‚úÖ DeepSeek API key loaded:', apiKey);\n  return apiKey;\n};\n\n// Check if DeepSeek API is configured\nexport const isDeepSeekConfigured = (): boolean => {\n  return true; // Always configured since we have hardcoded key\n};\n\n// Request headers for DeepSeek API\nexport const getDeepSeekHeaders = (): Record<string, string> => {\n  const apiKey = getDeepSeekApiKey();\n  \n  return {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${apiKey}`,\n  };\n};\n","import { DEEPSEEK_CONFIG, getDeepSeekHeaders, getDeepSeekApiKey } from '@/config/deepseek';\nimport type { ResumeAnalysisPrompt } from '@/prompts/resumeAnalysis';\n\n// Types for DeepSeek API\nexport interface DeepSeekMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport interface DeepSeekRequest {\n  model: string;\n  messages: DeepSeekMessage[];\n  temperature?: number;\n  max_tokens?: number;\n  stream?: boolean;\n}\n\nexport interface DeepSeekResponse {\n  id: string;\n  object: string;\n  created: number;\n  model: string;\n  choices: Array<{\n    index: number;\n    message: {\n      role: string;\n      content: string;\n    };\n    finish_reason: string;\n  }>;\n  usage: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\nexport interface DeepSeekError {\n  error: {\n    message: string;\n    type: string;\n    code?: string;\n  };\n}\n\nclass DeepSeekApiService {\n  private readonly baseUrl = DEEPSEEK_CONFIG.API_URL;\n  private readonly model = DEEPSEEK_CONFIG.MODEL;\n  private readonly timeout = DEEPSEEK_CONFIG.TIMEOUT;\n\n  /**\n   * Check if API is properly configured\n   */\n  isConfigured(): boolean {\n    return true; // Always configured since we have hardcoded key\n  }\n\n  /**\n   * Make a request to DeepSeek API\n   */\n  private async makeRequest(request: DeepSeekRequest): Promise<DeepSeekResponse> {\n    console.log('üåê Making request to DeepSeek API...');\n    console.log('üì° API URL:', this.baseUrl);\n    console.log('ü§ñ Model:', this.model);\n\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n    try {\n      console.log('üì§ Sending request to DeepSeek...');\n      const response = await fetch(this.baseUrl, {\n        method: 'POST',\n        headers: getDeepSeekHeaders(),\n        body: JSON.stringify(request),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n      console.log('üì• Received response from DeepSeek:', response.status, response.statusText);\n\n      if (!response.ok) {\n        const errorData: DeepSeekError = await response.json();\n        console.error('‚ùå DeepSeek API Error:', errorData);\n        throw new Error(`DeepSeek API Error: ${errorData.error.message}`);\n      }\n\n      const data: DeepSeekResponse = await response.json();\n      console.log('‚úÖ Successfully received data from DeepSeek');\n      console.log('üìä Response usage:', data.usage);\n      return data;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.error('‚ùå DeepSeek API request failed:', error);\n      \n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          throw new Error('Request timeout. Please try again.');\n        }\n        throw error;\n      }\n      \n      throw new Error('Unknown error occurred while calling DeepSeek API');\n    }\n  }\n\n  /**\n   * Send a chat completion request\n   */\n  async chatCompletion(\n    messages: DeepSeekMessage[],\n    options: {\n      temperature?: number;\n      maxTokens?: number;\n    } = {}\n  ): Promise<string> {\n    const request: DeepSeekRequest = {\n      model: this.model,\n      messages,\n      temperature: options.temperature || 0.7,\n      max_tokens: options.maxTokens || 4000,\n      stream: false,\n    };\n\n    const response = await this.makeRequest(request);\n    \n    if (response.choices && response.choices.length > 0) {\n      return response.choices[0].message.content;\n    }\n    \n    throw new Error('No response from DeepSeek API');\n  }\n\n\n  /**\n   * Parse JSON response from DeepSeek\n   */\n  private parseJsonResponse(response: string): any {\n    // Try to extract JSON from markdown code block first\n    const jsonMatch = response.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n    if (jsonMatch) {\n      console.log('üîç Found JSON in markdown block:', jsonMatch[1]);\n      try {\n        const cleanJson = jsonMatch[1].trim();\n        const parsedResponse = JSON.parse(cleanJson);\n        console.log('‚úÖ Successfully parsed JSON from markdown block');\n        return parsedResponse;\n      } catch (e) {\n        console.error('‚ùå Failed to parse JSON from markdown block:', e);\n      }\n    }\n    \n    // Try to find JSON without markdown (look for { at the start)\n    const jsonStart = response.indexOf('{');\n    if (jsonStart !== -1) {\n      const jsonEnd = response.lastIndexOf('}');\n      if (jsonEnd !== -1 && jsonEnd > jsonStart) {\n        const jsonString = response.substring(jsonStart, jsonEnd + 1);\n        console.log('üîç Found JSON without markdown:', jsonString);\n        try {\n          const parsedResponse = JSON.parse(jsonString);\n          console.log('‚úÖ Successfully parsed JSON without markdown');\n          return parsedResponse;\n        } catch (e) {\n          console.error('‚ùå Failed to parse JSON without markdown:', e);\n        }\n      }\n    }\n    \n    // Try to parse as direct JSON\n    try {\n      const parsedResponse = JSON.parse(response);\n      console.log('‚úÖ Successfully parsed direct JSON');\n      return parsedResponse;\n    } catch (parseError) {\n      console.warn('‚ùå Failed to parse as direct JSON:', parseError);\n    }\n    \n    // If all parsing fails, throw error\n    throw new Error('Failed to parse AI response as JSON. Response: ' + response.substring(0, 500) + '...');\n  }\n\n  /**\n   * Analyze resume using DeepSeek (legacy method for text)\n   */\n  async analyzeResume(prompt: ResumeAnalysisPrompt): Promise<any> {\n    const messages: DeepSeekMessage[] = [\n      { role: 'system', content: prompt.system },\n      { role: 'user', content: prompt.user }\n    ];\n\n    const response = await this.chatCompletion(messages, {\n      temperature: 0.3, // Lower temperature for more consistent analysis\n      maxTokens: 3000,\n    });\n\n    console.log('üì• Raw response from DeepSeek:', response);\n    \n    return this.parseJsonResponse(response);\n  }\n\n\n  /**\n   * Test API connection\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      const testMessages: DeepSeekMessage[] = [\n        { role: 'system', content: '–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API.' },\n        { role: 'user', content: '–û—Ç–≤–µ—Ç—å \"API —Ä–∞–±–æ—Ç–∞–µ—Ç\" –µ—Å–ª–∏ —Ç—ã –ø–æ–ª—É—á–∏–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.' }\n      ];\n\n      const response = await this.chatCompletion(testMessages, {\n        temperature: 0.1,\n        maxTokens: 50,\n      });\n\n      return response.includes('API —Ä–∞–±–æ—Ç–∞–µ—Ç') || response.includes('—Ä–∞–±–æ—Ç–∞–µ—Ç');\n    } catch (error) {\n      console.error('DeepSeek API connection test failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get API usage statistics (if available)\n   */\n  async getUsageStats(): Promise<{\n    totalTokens: number;\n    promptTokens: number;\n    completionTokens: number;\n  } | null> {\n    // This would require additional API calls to get usage statistics\n    // For now, return null as DeepSeek might not provide this endpoint\n    return null;\n  }\n}\n\nexport const deepSeekApiService = new DeepSeekApiService();\n"],"names":["DEEPSEEK_CONFIG","getDeepSeekApiKey","apiKey","getDeepSeekHeaders","DeepSeekApiService","__publicField","request","controller","timeoutId","response","errorData","data","error","messages","options","jsonMatch","cleanJson","parsedResponse","jsonStart","jsonEnd","jsonString","e","parseError","prompt","testMessages","deepSeekApiService"],"mappings":"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"}